# (i know that this solution is over-engineered)

var points = [
	Vec(0, 0), 		# origin
	Vec(0, 50),
	Vec(8, 50),
	Vec(37, 10),
	Vec(37, 50),
	Vec(45, 50),
	Vec(45, 0),
	Vec(37, 0),
	Vec(8, 40),
	Vec(8, 0),
	Vec(0, 0),
];

for var i in 1:points.size() do {
	var last_pos = points[i-1];
	var new_pos = points[i];
	var vec = last_pos.to(new_pos);
	vec.move_turtle();
}

# 2-D Vector
class Vec {
	use namespace math;
	use namespace turtle;

	public:
		var x = 0;
		var y = 0;

		constructor(x_value, y_value) {
			x = x_value;
			y = y_value;
		}

		function to (vec) {
			return Vec(vec.x - x, vec.y - y);
		}

		function mag () {
			return math.sqrt(x^2 + y^2);
		}

		function turn_turtle (is_counter_clockwise) {
			var rad = math.atan2(x, y);
			var deg = 180 / math.pi() * rad;
			if is_counter_clockwise then deg = 360 - deg;	# invert direction if counter-clockwise
			turtle.turn(deg);
		}

		# turn towards vec, move by vec magnitude, then turn back into the original rotation 
		function move_turtle () {
			turn_turtle(false);
			turtle.move(mag());
			turn_turtle(true);
		}
}
